*패키지 게임에서 게임 서버
패키지 게임 -> 소규모의 플레이어가 같이 모여서 하는 온라인 게임.
Offline플레이가 가능한 경우도 많음, MOG(Multiplayer Online Game)라고도 함.
서버 -> 플레이어 세 명 이상이 게임을 하려면 그들의 플레이 상태를 저장하는 곳이 필요하고
이를 위해 플레이어 중 한 명의 컴퓨터가 모든 플레이어의 게임 플레이 상태를 취합해서 유지하는
역할을 해야함 그곳을 서버(server)라고 부름.
*데디케이티드 서버 -> 클라이언트 프로그램과 같은 엔진을 사용하지만 렌더링과 사용자 입력 처리를
받지 않고, 순전히 클라이언트의 연결을 받는 세션을 처리만 하는 프로그램이 따로 운용하는 경우.

*게임 서버가 주로 하는 일
1. 여러 사용자와 상호 작용.
2. 클라이언트에서 해킹 당하면 안 되는 처리
3. 플레이어의 상태 보관

*게임 서버의 품질
안정성
-> 게임 서버가 얼마나 죽지 않는가를 의미.
소프트웨어 측면에서 안정성에 악영향을 주는 주된 요인은 버그이다. 구조적으로 설계가 잘못
되었거나 사소한 코딩 실수가 서버의 안정성을 위협함. 안정성에는 게임서버가 얼마나 오작동하지 않는가 포함

*서버의 불안정을 극복하는 방법
1. 서버가 죽더라도 최대한 빨리 다시 살아나게 한다.
2. 서버는 죽더라도 최대한 적은 서비스만 죽게 한다.
3. 서버 오작동에 대해서 로그를 남길 수 있게 한다.

*확장성
서버를 얼마나 많이 설치할 수 있느냐를 의미. 게임 사용자 측면에서 사용자수가 늘어나더라도 
서비스 품질이 떨어지지 않고 유지되느냐 가 곧 확장성을 의미한다.
서버 확장성을 올리는 방법에는 크게 수직적 확장(scale-up)과 수평적 확장(scale-out)이 있다.

*게임 서버의 성능을 높이는 법 : 서버의 단위 처리 속도를 높이기
-> 서버의 단위 처리 속도를 높이려면, 프로그램이 더 빠르게 실행할 수 있게 코드 최적화나 
알고리즘 최적화를 실행. RPG게임에서는 몬스터와 플레이어 외 캐릭터(Non Player Character, NPC)
의 길찾기 알고리즘이 소요하는 처리시간을 O(1)으로 개선하고자 path table테크닉 쓰는것도 방법

*게임 서버의 성능을 높이는 법 : 서버의 과부하 영역을 분산
->코드 프로필링 이용하기 : 어떤 함수가 처리 시간이 많이 차지하는지 발견한 후 그것에 집중해서 성능 개선
함수A의 처리 속도를 더 높일 수 있는 방법이 더 이상 없고, 그렇다고 함수 A를
실행하는 빈도를 낮출 수 있는 방법도 없다면 분산이 필요하다.

*게임 서버의 성능을 높이는 법
1.  네트워크 프로토콜 최적화
2. 네트워크 전송 시간 줄이기
->고품질 네트워크회선을 가진 데이터센터에 서버를 설치하기
지리적으로 가까운 데이터센터에 서버들을 분산해서 설치하기
3. 서버를 거치지 않고 클라이언트끼리 직접 통신하게 하기
-> P2P네트워킹 : 클라이언트끼리 직접 메시지를 주고받는 것.
P2P 네트워킹은 서버에 걸리는 부담도 줄여 준다는 효과가 있으므로 파일 전송이나 음성 및
화성채팅처럼 클라이언트끼리 주고받는 데이터의 양이 클 때 더욱 효과적임.

*플레이어 정보의 저장
-> 온라인 게임에서 플레이어의 데이터 관리 중요성은 점점 커지고 있다.
보통 싱글플레이 게임의 플레이어 정보는 게임을 구동하는 컴퓨터 자체의 디스크에 저장된다.
*온라인 게임에서 플레이어 정보를 저장하지 않는 이유
1. 해킹에 취약하다.
2. 같은 사용자가 다른 기기를 사용할 때 문제가 된다.
그래서 대다수 온라인 게임은 플레이어 정보를 클라이언트가 아니라 서버에 저장한다.
플레이어의 데이터는 게임 서버에 직접 저장하는 경우도 있지만, 게임 서버스의 규모가 큰 경우에는
게임 서버의 디스크에 직접 저장하지 않고별도의 서버 머신을 쓰기도 한다. 그 머신은
데이터베이스라는 소프트웨어 안에서 플레이어 데이터를 관리한다.

*데이터베이스 소프트웨어를 이용해서 저장하는 이유
1. 데이터 관리와 분석을 빠르게 할 수 있다.
2. 강력한 데이터 복원 기능이 있다.
3. 전부  아니면 전무 로 데이터를 변경할 수 있다.
4. 데이터 일관성을 유지시켜 준다.
5. 처리가 2개 이상 동시에 실행될 때 한 데이터가 동시에 여러 데이터를 액세스
하면서 이상환 결과가 나오는 문제를 막아 주는 기능이 있다.
6. 장애에 대한 내성이 강하다.



